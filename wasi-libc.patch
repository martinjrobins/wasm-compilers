Only in build/wasi-libc/: build
diff '--color=auto' -r -u wasi-libc/libc-bottom-half/headers/public/__typedef_sigset_t.h build/wasi-libc/libc-bottom-half/headers/public/__typedef_sigset_t.h
--- wasi-libc/libc-bottom-half/headers/public/__typedef_sigset_t.h	2024-01-02 01:42:49.525707686 +0100
+++ build/wasi-libc/libc-bottom-half/headers/public/__typedef_sigset_t.h	2024-01-02 21:50:58.155242189 +0100
@@ -2,6 +2,6 @@
 #define __wasilibc___typedef_sigset_t_h
 
 /* TODO: This is just a placeholder for now. Keep this in sync with musl. */
-typedef unsigned char sigset_t;
+typedef struct { unsigned long long __val[1]; } sigset_t;
 
 #endif
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/arch/wasm32/bits/signal.h build/wasi-libc/libc-top-half/musl/arch/wasm32/bits/signal.h
--- wasi-libc/libc-top-half/musl/arch/wasm32/bits/signal.h	2023-12-31 09:15:54.869499142 +0100
+++ build/wasi-libc/libc-top-half/musl/arch/wasm32/bits/signal.h	2024-01-02 21:50:58.156242245 +0100
@@ -1,5 +1,3 @@
-#ifdef _WASI_EMULATED_SIGNAL
-
 #define SIGHUP    1
 #define SIGINT    2
 #define SIGQUIT   3
@@ -37,4 +35,11 @@
 
 #define _NSIG 65
 
-#endif
+#define SA_NOCLDSTOP  1
+#define SA_NOCLDWAIT  2
+#define SA_SIGINFO    4
+#define SA_ONSTACK    0x08000000
+#define SA_RESTART    0x10000000
+#define SA_NODEFER    0x40000000
+#define SA_RESETHAND  0x80000000
+#define SA_RESTORER   0x04000000
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/dirent.h build/wasi-libc/libc-top-half/musl/include/dirent.h
--- wasi-libc/libc-top-half/musl/include/dirent.h	2023-12-29 15:38:38.782537729 +0100
+++ build/wasi-libc/libc-top-half/musl/include/dirent.h	2024-01-02 21:50:58.156242245 +0100
@@ -56,7 +56,9 @@
 #define DT_BLK 6
 #define DT_REG 8
 #define DT_LNK 10
+#endif
 #define DT_SOCK 12
+#ifdef __wasilibc_unmodified_upstream /* Use alternate WASI libc headers */
 #define DT_WHT 14
 #define IFTODT(x) ((x)>>12 & 017)
 #define DTTOIF(x) ((x)<<12)
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/fcntl.h build/wasi-libc/libc-top-half/musl/include/fcntl.h
--- wasi-libc/libc-top-half/musl/include/fcntl.h	2024-01-02 01:42:49.526707741 +0100
+++ build/wasi-libc/libc-top-half/musl/include/fcntl.h	2024-01-02 21:50:58.156242245 +0100
@@ -55,11 +55,13 @@
 #define F_OFD_SETLKW 38
 
 #define F_DUPFD_CLOEXEC 1030
+#endif
 
 #define F_RDLCK 0
 #define F_WRLCK 1
 #define F_UNLCK 2
 
+#ifdef __wasilibc_unmodified_upstream /* Use alternate WASI libc headers */
 #define FD_CLOEXEC 1
 
 #define AT_FDCWD (-100)
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/signal.h build/wasi-libc/libc-top-half/musl/include/signal.h
--- wasi-libc/libc-top-half/musl/include/signal.h	2023-12-29 15:38:38.785537895 +0100
+++ build/wasi-libc/libc-top-half/musl/include/signal.h	2024-01-02 21:50:58.156242245 +0100
@@ -1,7 +1,3 @@
-#ifndef _WASI_EMULATED_SIGNAL
-#error "wasm lacks signal support; to enable minimal signal emulation, \
-compile with -D_WASI_EMULATED_SIGNAL and link with -lwasi-emulated-signal"
-#else
 #ifndef _SIGNAL_H
 #define _SIGNAL_H
 
@@ -15,7 +11,6 @@
  || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) \
  || defined(_BSD_SOURCE)
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no ucontext support */
 #ifdef _GNU_SOURCE
 #define __ucontext ucontext
 #endif
@@ -49,15 +44,12 @@
 typedef struct sigaltstack stack_t;
 #endif
 
-#endif
-
 #include <bits/signal.h>
 
 #if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
  || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) \
  || defined(_BSD_SOURCE)
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no sigaction */
 #define SIG_HOLD ((void (*)(int)) 2)
 
 #define FPE_INTDIV 1
@@ -188,6 +180,8 @@
 #define SA_UNSUPPORTED 0x00000400
 #define SA_EXPOSE_TAGBITS 0x00000800
 
+#ifdef __wasilibc_unmodified_upstream /* WASI has no realtime signals */
+
 struct sigevent {
 	union sigval sigev_value;
 	int sigev_signo;
@@ -210,9 +204,7 @@
 #define SIGEV_NONE 1
 #define SIGEV_THREAD 2
 #define SIGEV_THREAD_ID 4
-#endif
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no realtime signals */
 int __libc_current_sigrtmin(void);
 int __libc_current_sigrtmax(void);
 
@@ -222,6 +214,7 @@
 
 #ifdef __wasilibc_unmodified_upstream /* WASI has no signals */
 int kill(pid_t, int);
+#endif
 
 int sigemptyset(sigset_t *);
 int sigfillset(sigset_t *);
@@ -230,8 +223,11 @@
 int sigismember(const sigset_t *, int);
 
 int sigprocmask(int, const sigset_t *__restrict, sigset_t *__restrict);
+#ifdef __wasilibc_unmodified_upstream /* WASI has no signals */
 int sigsuspend(const sigset_t *);
+#endif
 int sigaction(int, const struct sigaction *__restrict, struct sigaction *__restrict);
+#ifdef __wasilibc_unmodified_upstream /* WASI has no signals */
 int sigpending(sigset_t *);
 int sigwait(const sigset_t *__restrict, int *__restrict);
 int sigwaitinfo(const sigset_t *__restrict, siginfo_t *__restrict);
@@ -336,4 +332,3 @@
 #endif
 
 #endif
-#endif
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/stdlib.h build/wasi-libc/libc-top-half/musl/include/stdlib.h
--- wasi-libc/libc-top-half/musl/include/stdlib.h	2023-12-29 15:38:38.785537895 +0100
+++ build/wasi-libc/libc-top-half/musl/include/stdlib.h	2024-01-02 21:50:58.156242245 +0100
@@ -128,9 +128,7 @@
 
 #if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) \
  || defined(_BSD_SOURCE)
-#ifdef __wasilibc_unmodified_upstream /* WASI has no absolute paths */
 char *realpath (const char *__restrict, char *__restrict);
-#endif
 long int random (void);
 void srandom (unsigned int);
 char *initstate (unsigned int, char *, size_t);
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/mman.h build/wasi-libc/libc-top-half/musl/include/sys/mman.h
--- wasi-libc/libc-top-half/musl/include/sys/mman.h	2023-12-29 15:38:38.785537895 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/mman.h	2024-01-02 22:02:33.744824119 +0100
@@ -1,7 +1,3 @@
-#ifndef _WASI_EMULATED_MMAN
-#error "WASI lacks a true mmap; to enable minimal mmap emulation, \
-compile with -D_WASI_EMULATED_MMAN and link with -lwasi-emulated-mman"
-#else
 #ifndef	_SYS_MMAN_H
 #define	_SYS_MMAN_H
 #ifdef __cplusplus
@@ -130,13 +126,6 @@
 int mlockall (int);
 int munlockall (void);
 
-#ifdef _GNU_SOURCE
-void *mremap (void *, size_t, size_t, int, ...);
-int remap_file_pages (void *, size_t, int, size_t, int);
-int memfd_create (const char *, unsigned);
-int mlock2 (const void *, size_t, unsigned);
-#endif
-
 #if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
 int madvise (void *, size_t, int);
 int mincore (void *, size_t, unsigned char *);
@@ -154,4 +143,3 @@
 }
 #endif
 #endif
-#endif
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/resource.h build/wasi-libc/libc-top-half/musl/include/sys/resource.h
--- wasi-libc/libc-top-half/musl/include/sys/resource.h	2023-12-29 15:38:38.786537951 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/resource.h	2024-01-02 21:50:58.156242245 +0100
@@ -1,8 +1,3 @@
-#ifndef _WASI_EMULATED_PROCESS_CLOCKS
-#error WASI lacks process-associated clocks; to enable emulation of the `getrusage` function using \
-the wall clock, which isn't sensitive to whether the program is running or suspended, \
-compile with -D_WASI_EMULATED_PROCESS_CLOCKS and link with -lwasi-emulated-process-clocks
-#else
 #ifndef	_SYS_RESOURCE_H
 #define	_SYS_RESOURCE_H
 
@@ -22,7 +17,6 @@
 #include <bits/alltypes.h>
 #include <bits/resource.h>
 
-#ifdef __wasilibc_unmodified_upstream /* Use alternate WASI libc headers */
 typedef unsigned long long rlim_t;
 
 struct rlimit {
@@ -56,8 +50,10 @@
 int setrlimit (int, const struct rlimit *);
 int getrusage (int, struct rusage *);
 
+#ifdef __wasilibc_unmodified_upstream
 int getpriority (int, id_t);
 int setpriority (int, id_t, int);
+#endif
 
 #ifdef _GNU_SOURCE
 int prlimit(pid_t, int, const struct rlimit *, struct rlimit *);
@@ -110,9 +106,6 @@
 #define rlimit64 rlimit
 #define rlim64_t rlim_t
 #endif
-#else
-#include <__header_sys_resource.h>
-#endif
 
 #if _REDIR_TIME64
 __REDIR(getrusage, __getrusage_time64);
@@ -123,4 +116,3 @@
 #endif
 
 #endif
-#endif
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/socket.h build/wasi-libc/libc-top-half/musl/include/sys/socket.h
--- wasi-libc/libc-top-half/musl/include/sys/socket.h	2023-12-29 15:38:38.786537951 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/socket.h	2024-01-02 21:50:58.156242245 +0100
@@ -88,6 +88,7 @@
 #define SHUT_RD 0
 #define SHUT_WR 1
 #define SHUT_RDWR 2
+#endif
 
 #ifndef SOCK_STREAM
 #define SOCK_STREAM    1
@@ -336,6 +337,7 @@
 
 #define SOMAXCONN       128
 
+#ifdef __wasilibc_unmodified_upstream /* Use alternate WASI libc headers */
 #define MSG_OOB       0x0001
 #define MSG_PEEK      0x0002
 #define MSG_DONTROUTE 0x0004
@@ -395,18 +397,16 @@
 #include <__struct_sockaddr_storage.h>
 #endif
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no socket/socketpair */
 int socket (int, int, int);
+#ifdef __wasilibc_unmodified_upstream /* WASI has no socket/socketpair */
 int socketpair (int, int, int, int [2]);
 #endif
 
 int shutdown (int, int);
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no bind/connect/listen/accept */
 int bind (int, const struct sockaddr *, socklen_t);
 int connect (int, const struct sockaddr *, socklen_t);
 int listen (int, int);
-#endif
 
 int accept (int, struct sockaddr *__restrict, socklen_t *__restrict);
 int accept4(int, struct sockaddr *__restrict, socklen_t *__restrict, int);
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/stat.h build/wasi-libc/libc-top-half/musl/include/sys/stat.h
--- wasi-libc/libc-top-half/musl/include/sys/stat.h	2023-12-29 15:38:38.786537951 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/stat.h	2024-01-02 21:50:58.156242245 +0100
@@ -78,14 +78,10 @@
 int fstat(int, struct stat *);
 int lstat(const char *__restrict, struct stat *__restrict);
 int fstatat(int, const char *__restrict, struct stat *__restrict, int);
-#ifdef __wasilibc_unmodified_upstream /* WASI has no chmod */
 int chmod(const char *, mode_t);
 int fchmod(int, mode_t);
 int fchmodat(int, const char *, mode_t, int);
-#endif
-#ifdef __wasilibc_unmodified_upstream /* WASI has no umask */
 mode_t umask(mode_t);
-#endif
 int mkdir(const char *, mode_t);
 #ifdef __wasilibc_unmodified_upstream /* WASI has no fifo */
 int mkfifo(const char *, mode_t);
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/times.h build/wasi-libc/libc-top-half/musl/include/sys/times.h
--- wasi-libc/libc-top-half/musl/include/sys/times.h	2023-12-29 15:38:38.786537951 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/times.h	2024-01-02 21:50:58.156242245 +0100
@@ -1,8 +1,3 @@
-#ifndef _WASI_EMULATED_PROCESS_CLOCKS
-#error WASI lacks process-associated clocks; to enable emulation of the `times` function using \
-the wall clock, which isn't sensitive to whether the program is running or suspended, \
-compile with -D_WASI_EMULATED_PROCESS_CLOCKS and link with -lwasi-emulated-process-clocks
-#else
 #ifndef	_SYS_TIMES_H
 #define	_SYS_TIMES_H
 
@@ -31,4 +26,3 @@
 #endif
 
 #endif
-#endif
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/sys/un.h build/wasi-libc/libc-top-half/musl/include/sys/un.h
--- wasi-libc/libc-top-half/musl/include/sys/un.h	2023-12-29 15:38:38.786537951 +0100
+++ build/wasi-libc/libc-top-half/musl/include/sys/un.h	2024-01-02 21:50:58.156242245 +0100
@@ -14,14 +14,10 @@
 
 #include <bits/alltypes.h>
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no UNIX-domain sockets */
 struct sockaddr_un {
 	sa_family_t sun_family;
 	char sun_path[108];
 };
-#else
-#include <__struct_sockaddr_un.h>
-#endif
 
 #if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
 #ifdef __wasilibc_unmodified_upstream /* Declare strlen with the same attributes as <string.h> uses */
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/time.h build/wasi-libc/libc-top-half/musl/include/time.h
--- wasi-libc/libc-top-half/musl/include/time.h	2023-12-29 15:38:38.787538006 +0100
+++ build/wasi-libc/libc-top-half/musl/include/time.h	2024-01-02 21:50:58.157242300 +0100
@@ -60,16 +60,7 @@
 #include <__header_time.h>
 #endif
 
-#if defined(__wasilibc_unmodified_upstream) || defined(_WASI_EMULATED_PROCESS_CLOCKS)
 clock_t clock (void);
-#else
-__attribute__((__deprecated__(
-"WASI lacks process-associated clocks; to enable emulation of the `clock` function using "
-"the wall clock, which isn't sensitive to whether the program is running or suspended, "
-"compile with -D_WASI_EMULATED_PROCESS_CLOCKS and link with -lwasi-emulated-process-clocks"
-)))
-clock_t clock (void);
-#endif
 time_t time (time_t *);
 double difftime (time_t, time_t);
 time_t mktime (struct tm *);
diff '--color=auto' -r -u wasi-libc/libc-top-half/musl/include/unistd.h build/wasi-libc/libc-top-half/musl/include/unistd.h
--- wasi-libc/libc-top-half/musl/include/unistd.h	2023-12-29 15:38:38.787538006 +0100
+++ build/wasi-libc/libc-top-half/musl/include/unistd.h	2024-01-02 21:50:58.157242300 +0100
@@ -51,11 +51,9 @@
 #endif
 int close(int);
 int posix_close(int, int);
-#ifdef __wasilibc_unmodified_upstream /* WASI has no dup */
 int dup(int);
 int dup2(int, int);
 int dup3(int, int, int);
-#endif
 off_t lseek(int, off_t, int);
 #ifdef __wasilibc_unmodified_upstream /* Optimize the readonly case of lseek */
 #else
@@ -93,12 +91,10 @@
 ssize_t pread(int, void *, size_t, off_t);
 ssize_t pwrite(int, const void *, size_t, off_t);
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no chown */
 int chown(const char *, uid_t, gid_t);
 int fchown(int, uid_t, gid_t);
 int lchown(const char *, uid_t, gid_t);
 int fchownat(int, const char *, uid_t, gid_t, int);
-#endif
 
 int link(const char *, const char *);
 int linkat(int, const char *, int, const char *, int);
@@ -128,9 +124,7 @@
 int chdir(const char *);
 char *getcwd(char *, size_t);
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no signals */
 unsigned alarm(unsigned);
-#endif
 unsigned sleep(unsigned);
 #ifdef __wasilibc_unmodified_upstream /* WASI has no pause */
 int pause(void);
@@ -149,24 +143,15 @@
 #endif
 _Noreturn void _exit(int);
 
-#if defined(__wasilibc_unmodified_upstream) || defined(_WASI_EMULATED_GETPID)
-pid_t getpid(void);
-#else
-__attribute__((__deprecated__(
-"WASI lacks process identifiers; to enable emulation of the `getpid` function using "
-"a placeholder value, which doesn't reflect the host PID of the program, "
-"compile with -D_WASI_EMULATED_GETPID and link with -lwasi-emulated-getpid"
-)))
 pid_t getpid(void);
-#endif
 #ifdef __wasilibc_unmodified_upstream /* WASI has no getpid etc. */
 pid_t getppid(void);
 pid_t getpgrp(void);
 pid_t getpgid(pid_t);
 int setpgid(pid_t, pid_t);
 pid_t setsid(void);
-pid_t getsid(pid_t);
 #endif
+pid_t getsid(pid_t);
 #ifdef __wasilibc_unmodified_upstream /* WASI has no ttyname */
 char *ttyname(int);
 int ttyname_r(int, char *, size_t);
@@ -177,8 +162,8 @@
 int tcsetpgrp(int, pid_t);
 #endif
 
-#ifdef __wasilibc_unmodified_upstream /* WASI has no getuid etc. */
 uid_t getuid(void);
+#ifdef __wasilibc_unmodified_upstream /* WASI has no getuid etc. */
 uid_t geteuid(void);
 gid_t getgid(void);
 gid_t getegid(void);
diff '--color=auto' -r -u wasi-libc/Makefile build/wasi-libc/Makefile
--- wasi-libc/Makefile	2023-12-29 15:38:38.761536567 +0100
+++ build/wasi-libc/Makefile	2024-01-02 21:50:58.157242300 +0100
@@ -389,6 +389,8 @@
 LIBDL_OBJS = $(call objs,$(LIBDL_SOURCES))
 LIBC_BOTTOM_HALF_CRT_OBJS = $(call objs,$(LIBC_BOTTOM_HALF_CRT_SOURCES))
 
+LIBC_OBJS += $(OBJDIR)/wasi-libc-polyfill.o
+
 # These variables describe the locations of various files and
 # directories in the generated sysroot tree.
 SYSROOT_LIB := $(SYSROOT)/lib/$(TARGET_TRIPLE)
@@ -420,14 +422,9 @@
     "sys/user.h" \
     "sys/kd.h" "sys/vt.h" "sys/soundcard.h" "sys/sem.h" \
     "sys/shm.h" "sys/msg.h" "sys/ipc.h" "sys/ptrace.h" \
-    "sys/statfs.h" \
     "bits/kd.h" "bits/vt.h" "bits/soundcard.h" "bits/sem.h" \
     "bits/shm.h" "bits/msg.h" "bits/ipc.h" "bits/ptrace.h" \
-    "bits/statfs.h" \
-    "sys/vfs.h" \
-    "sys/statvfs.h" \
     "syslog.h" "sys/syslog.h" \
-    "wait.h" "sys/wait.h" \
     "ucontext.h" "sys/ucontext.h" \
     "paths.h" \
     "utmp.h" "utmpx.h" \
@@ -448,9 +445,8 @@
     "elf.h" "link.h" "bits/link.h" \
     "scsi/scsi.h" "scsi/scsi_ioctl.h" "scsi/sg.h" \
     "sys/auxv.h" \
-    "pwd.h" "shadow.h" "grp.h" \
+    "shadow.h" "grp.h" \
     "mntent.h" \
-    "netdb.h" \
     "resolv.h" \
     "pty.h" \
     "setjmp.h" \
@@ -532,7 +528,8 @@
 
 $(OBJDIR)/libdl.so.a: $(LIBDL_SO_OBJS)
 
-$(SYSROOT_LIB)/libc.a: $(LIBC_OBJS)
+$(SYSROOT_LIB)/libc.a: $(LIBC_OBJS) $(LIBWASI_EMULATED_SIGNAL_OBJS) $(LIBWASI_EMULATED_SIGNAL_MUSL_OBJS) $(LIBWASI_EMULATED_MMAN_OBJS) $(LIBWASI_EMULATED_PROCESS_CLOCKS_OBJS) $(LIBWASI_EMULATED_GETPID_OBJS)
+
 
 $(SYSROOT_LIB)/libc-printscan-long-double.a: $(MUSL_PRINTSCAN_LONG_DOUBLE_OBJS)
 
@@ -705,13 +702,6 @@
 	# The build succeeded! The generated sysroot is in $(SYSROOT).
 	#
 
-# The check for defined and undefined symbols expects there to be a heap
-# alloctor (providing malloc, calloc, free, etc). Skip this step if the build
-# is done without a malloc implementation.
-ifneq ($(MALLOC_IMPL),none)
-finish: check-symbols
-endif
-
 DEFINED_SYMBOLS = $(SYSROOT_SHARE)/defined-symbols.txt
 UNDEFINED_SYMBOLS = $(SYSROOT_SHARE)/undefined-symbols.txt
 
@@ -814,7 +804,7 @@
 
 install: finish
 	mkdir -p "$(INSTALL_DIR)"
-	cp -r "$(SYSROOT)/lib" "$(SYSROOT)/share" "$(SYSROOT)/include" "$(INSTALL_DIR)"
+	cp -r "$(SYSROOT)/lib" "$(SYSROOT)/include" "$(INSTALL_DIR)"
 
 clean:
 	$(RM) -r "$(OBJDIR)"
Only in build/wasi-libc/: sysroot
Only in build/wasi-libc/: wasi-libc-polyfill.c
